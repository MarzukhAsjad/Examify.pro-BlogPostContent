{
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-2592, 2112],
      "id": "b566acec-f74e-4c23-abfe-5cec3eb61ef9",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "dc7f895b-c9ab-48f7-add0-fbb7e3a7d5e5",
      "name": "Set date1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [-2112, 1680]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.currentDate }}",
        "format": "custom",
        "customFormat": "dd-MM-yyyy/H:mm",
        "options": {}
      },
      "id": "6170d1c4-ec16-4a84-b28a-d40ae5f24a04",
      "name": "Format date2",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [-1904, 1680]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "commitDate",
              "value": "={{ $json.formattedDate }}"
            }
          ]
        },
        "options": {}
      },
      "id": "581aadc8-914f-4327-89d1-dd4c3e99a9ba",
      "name": "Set commit date2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-1680, 1680]
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "auto",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "13QWBCMlAPeTd2UKpTDOsAGFefJBmJFIA",
            "mode": "list",
            "cachedResultName": "blogcontent",
            "cachedResultUrl": "https://drive.google.com/drive/folders/13QWBCMlAPeTd2UKpTDOsAGFefJBmJFIA"
          },
          "whatToSearch": "files"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [-1472, 1552],
      "id": "d3294d3c-0724-4e7d-8b51-ddf76c28e5d4",
      "name": "Search for blogPostContent snippet1",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "2vg1fSo8hu2qFmjI",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": ""
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [-1296, 1552],
      "id": "c0ac6cc3-0246-443f-996f-ef851b38d55b",
      "name": "Download snippet from Google Drive1",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "2vg1fSo8hu2qFmjI",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": "chefmatteo",
        "repository": "Examify.pro-BlogPostContent",
        "filePath": "data/blogPostContent.ts",
        "additionalParameters": {}
      },
      "id": "626af807-33a1-436c-915b-b561dd168cfc",
      "name": "Get GitHub blogPostContent.ts2",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [-1088, 1568],
      "webhookId": "73e2fcde-3956-43c7-aca9-f7237fd4ff11",
      "credentials": {
        "githubApi": {
          "id": "xPxf1slGiyx1TGdN",
          "name": "chefmatteo_testing_blog_integration"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Extract snippet from downloaded file\nconst snippet = Buffer.from($input.first().json.data, 'base64').toString('utf8');\n\n// Basic validation - check if it contains required elements\nif (!snippet.includes('slug') || !snippet.includes('title') || !snippet.includes('date')) {\n  throw new Error('Snippet must contain slug, title, and date fields');\n}\n\n// Check if it's a blog post snippet\nif (snippet.includes('newBlogPost') || snippet.includes('content') || snippet.includes('richContent')) {\n  return [{ json: { \n    validSnippet: true, \n    snippet: snippet,\n    originalSnippet: snippet,\n    fileName: 'blogPostContent-snippet',\n    snippetType: 'blogPost'\n  } }];\n}\n\n// Check if it's a blog preview snippet\nif (snippet.includes('newBlogPreview') || snippet.includes('excerpt')) {\n  return [{ json: { \n    validSnippet: true, \n    snippet: snippet,\n    originalSnippet: snippet,\n    fileName: 'blogPreviews-snippet',\n    snippetType: 'blogPreview'\n  } }];\n}\n\nthrow new Error('Snippet must be either a blog post or blog preview format');"
      },
      "id": "75fad90c-e4db-46c6-9ba0-cbb06c4fe360",
      "name": "Validate Snippet2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-1088, 1424]
    },
    {
      "parameters": {
        "command": "python3 ./compare_node/extract_github_content.py blogPostContent \"{{ $json.content }}\"",
        "options": {}
      },
      "id": "extract-github-content",
      "name": "Extract GitHub Content",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [-896, 1568]
    },
    {
      "parameters": {
        "functionCode": "// Parse JSON output from Extract GitHub Content\nconst stdout = $input.first().json.stdout;\n\ntry {\n  const result = JSON.parse(stdout);\n  \n  if (result.error) {\n    throw new Error(result.error);\n  }\n  \n  return [{ json: { \n    githubContent: result.rawContent,\n    extractedContent: result.blogPostContent,\n    fileName: 'blogPostContent.ts'\n  } }];\n} catch (error) {\n  throw new Error(`Failed to parse GitHub content: ${error.message}`);\n}"
      },
      "id": "parse-github-content",
      "name": "Parse GitHub Content",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-704, 1568]
    },
    {
      "parameters": {
        "command": "python3 ./compare_node/compare_content.py blogPostContent \"{{ $('Parse GitHub Content').item.json.githubContent }}\" \"{{ $('Validate Snippet2').item.json.snippet }}\"",
        "options": {}
      },
      "id": "compare-content-python",
      "name": "Compare Content Python",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [-512, 1440]
    },
    {
      "parameters": {
        "functionCode": "// Parse JSON output from Compare Content Python\nconst stdout = $input.first().json.stdout;\n\ntry {\n  const result = JSON.parse(stdout);\n  \n  if (result.error) {\n    throw new Error(result.error);\n  }\n  \n  return [{ json: { \n    hasChanges: result.hasChanges,\n    existingCount: result.existingCount,\n    newCount: result.newCount,\n    newPost: result.newPost,\n    mergedContent: result.mergedContent,\n    message: result.message || null,\n    error: result.error || null\n  } }];\n} catch (error) {\n  throw new Error(`Failed to parse compare result: ${error.message}`);\n}"
      },
      "id": "parse-compare-result",
      "name": "Parse Compare Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-320, 1440]
    },
    {
      "parameters": {
        "functionCode": "// Generate updated TypeScript file from merged content\nconst mergedContent = $input.first().json.mergedContent;\nconst newPost = $input.first().json.newPost;\n\n// Generate updated TypeScript file\nconst updatedContent = `export const blogPostContent = ${JSON.stringify(mergedContent, null, 2)};`;\n\nreturn [{ json: { \n  mergedContent: updatedContent, \n  newPostCount: mergedContent.length, \n  addedSlug: newPost.slug \n} }];"
      },
      "id": "d458b0cd-b4e3-4066-bff5-26c74acd3e75",
      "name": "Merge Content2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-128, 1440]
    },
    {
      "parameters": {
        "functionCode": "// Check for potential issues in merged content\nconst mergedContent = $input.first().json.mergedContent;\n\n// Validate TypeScript syntax\nif (!mergedContent.includes('export const blogPostContent')) {\n  throw new Error('Merged content missing required export statement');\n}\n\n// Check for valid JSON structure\ntry {\n  const contentMatch = mergedContent.match(/export const blogPostContent = (\\[.*?\\]);/s);\n  if (contentMatch) {\n    JSON.parse(contentMatch[1]);\n  }\n} catch (error) {\n  throw new Error('Invalid JSON structure in merged content');\n}\n\nreturn [{ json: { safeContent: true, contentLength: mergedContent.length } }];"
      },
      "id": "84bf2676-a3e7-41ee-b65d-3aaaa45d0e41",
      "name": "Content Safety Check2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [64, 1440]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": "chefmatteo",
        "repository": "Examify.pro-BlogPostContent",
        "filePath": "data/blogPostContent.ts",
        "fileContent": "={{ $('Merge Content2').item.json.mergedContent }}",
        "commitMessage": "Auto-merge new blog post from Google Drive snippet: {{ $json.commitDate }}"
      },
      "id": "567f45d6-981a-4a6d-a963-252c70fe8575",
      "name": "Update GitHub with Merged Content2",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [256, 1440],
      "webhookId": "a8d0f9e6-87eb-4578-8ce6-9e6f3fa300ae",
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "xPxf1slGiyx1TGdN",
          "name": "chefmatteo_testing_blog_integration"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Log successful merge\nconst addedSlug = $('Merge Content2').item.json.addedSlug;\nconst newPostCount = $('Merge Content2').item.json.newPostCount;\n\nreturn [{ json: { \n  message: `Successfully merged new blog post: ${addedSlug}`,\n  totalPosts: newPostCount,\n  timestamp: new Date().toISOString(),\n  action: 'merge_success'\n} }];"
      },
      "id": "180a06f2-7389-48a6-b0b6-60a438a6ac0b",
      "name": "Log Success2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [448, 1440]
    },
    {
      "parameters": {
        "functionCode": "// Log no action needed\nreturn [{ json: { \n  message: 'Content is identical - no update needed',\n  timestamp: new Date().toISOString(),\n  action: 'no_action'\n} }];"
      },
      "id": "c85673c6-7ff2-47bf-a22e-c51f2a517429",
      "name": "Log No Action2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-320, 1664]
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "auto",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "14Wlp8CJ8sl25dJTWeXIeWkZTw-nmiOX_",
            "mode": "list",
            "cachedResultName": "blogpreview",
            "cachedResultUrl": "https://drive.google.com/drive/folders/14Wlp8CJ8sl25dJTWeXIeWkZTw-nmiOX_"
          },
          "whatToSearch": "files"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [-1472, 1760],
      "id": "244cd3b3-cbd9-4db7-aff1-932942497b77",
      "name": "Search for blogPreviews snippet1",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "2vg1fSo8hu2qFmjI",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": "={{ $json.id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [-1280, 1760],
      "id": "53443d23-b6f7-4cc2-9cf6-28e9539b86e0",
      "name": "Download preview snippet from Google Drive1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "2vg1fSo8hu2qFmjI",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": "chefmatteo",
        "repository": "Examify.pro-BlogPostContent",
        "filePath": "data/blogPreviews.ts",
        "additionalParameters": {}
      },
      "id": "cae376bc-2e64-46cf-9be1-8090ddc7c887",
      "name": "Get GitHub blogPreviews.ts2",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [-1088, 1728],
      "webhookId": "07b62aa6-12b2-42a0-8be4-25a06e2dedde",
      "credentials": {
        "githubApi": {
          "id": "xPxf1slGiyx1TGdN",
          "name": "chefmatteo_testing_blog_integration"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Validate preview snippet format\nconst snippet = Buffer.from($input.first().json.data, 'base64').toString('utf8');\n\n// Check for required export\nif (!snippet.includes('export const newBlogPreview')) {\n  throw new Error('Preview snippet must contain \"export const newBlogPreview\"');\n}\n\n// Check for required fields\nconst requiredFields = ['slug', 'title', 'date', 'excerpt'];\nconst missingFields = requiredFields.filter(field => !snippet.includes(field));\n\nif (missingFields.length > 0) {\n  throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n}\n\nreturn [{ json: { validSnippet: true, snippet, fileName: 'blogPreviews-snippet' } }];"
      },
      "id": "d1a0ea12-3225-4bfa-b5a3-bb0505989e65",
      "name": "Validate Preview Snippet2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-1088, 1888]
    },
    {
      "parameters": {
        "command": "python3 ./compare_node/extract_github_content.py blogPreviews \"{{ $json.content }}\"",
        "options": {}
      },
      "id": "extract-github-previews",
      "name": "Extract GitHub Previews",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [-896, 1728]
    },
    {
      "parameters": {
        "functionCode": "// Parse JSON output from Extract GitHub Previews\nconst stdout = $input.first().json.stdout;\n\ntry {\n  const result = JSON.parse(stdout);\n  \n  if (result.error) {\n    throw new Error(result.error);\n  }\n  \n  return [{ json: { \n    githubContent: result.rawContent,\n    extractedContent: result.blogPreviews,\n    fileName: 'blogPreviews.ts'\n  } }];\n} catch (error) {\n  throw new Error(`Failed to parse GitHub previews: ${error.message}`);\n}"
      },
      "id": "parse-github-previews",
      "name": "Parse GitHub Previews",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-704, 1728]
    },
    {
      "parameters": {
        "command": "python3 ./compare_node/compare_content.py blogPreviews \"{{ $('Parse GitHub Previews').item.json.githubContent }}\" \"{{ $('Validate Preview Snippet2').item.json.snippet }}\"",
        "options": {}
      },
      "id": "compare-previews-python",
      "name": "Compare Previews Python",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [-512, 1856]
    },
    {
      "parameters": {
        "functionCode": "// Parse JSON output from Compare Previews Python\nconst stdout = $input.first().json.stdout;\n\ntry {\n  const result = JSON.parse(stdout);\n  \n  if (result.error) {\n    throw new Error(result.error);\n  }\n  \n  return [{ json: { \n    hasChanges: result.hasChanges,\n    existingCount: result.existingCount,\n    newCount: result.newCount,\n    newPreview: result.newPreview,\n    mergedContent: result.mergedContent,\n    message: result.message || null,\n    error: result.error || null\n  } }];\n} catch (error) {\n  throw new Error(`Failed to parse preview compare result: ${error.message}`);\n}"
      },
      "id": "parse-preview-result",
      "name": "Parse Preview Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-320, 1856]
    },
    {
      "parameters": {
        "functionCode": "// Generate updated TypeScript file from merged preview content\nconst mergedContent = $input.first().json.mergedContent;\nconst newPreview = $input.first().json.newPreview;\n\n// Generate updated TypeScript file\nconst updatedContent = `export const blogPreviews = ${JSON.stringify(mergedContent, null, 2)};`;\n\nreturn [{ json: { \n  mergedContent: updatedContent, \n  newPreviewCount: mergedContent.length, \n  addedSlug: newPreview.slug \n} }];"
      },
      "id": "6f7ceec8-cb96-456f-85fa-8f6ddd87e5e9",
      "name": "Merge Preview Content2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-128, 1856]
    },
    {
      "parameters": {
        "functionCode": "// Check for potential issues in merged preview content\nconst mergedContent = $input.first().json.mergedContent;\n\n// Validate TypeScript syntax\nif (!mergedContent.includes('export const blogPreviews')) {\n  throw new Error('Merged preview content missing required export statement');\n}\n\n// Check for valid JSON structure\ntry {\n  const contentMatch = mergedContent.match(/export const blogPreviews = (\\[.*?\\]);/s);\n  if (contentMatch) {\n    JSON.parse(contentMatch[1]);\n  }\n} catch (error) {\n  throw new Error('Invalid JSON structure in merged preview content');\n}\n\nreturn [{ json: { safeContent: true, contentLength: mergedContent.length } }];"
      },
      "id": "544e5c9d-4335-401e-b72f-2ca4add44752",
      "name": "Preview Safety Check2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [64, 1856]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": "chefmatteo",
        "repository": "Examify.pro-BlogPostContent",
        "filePath": "data/blogPreviews.ts",
        "fileContent": "={{ $('Merge Preview Content2').item.json.mergedContent }}",
        "commitMessage": "Auto-merge new blog preview from Google Drive snippet: {{ $json.commitDate }}"
      },
      "id": "ad710d33-e6a9-4eb3-9202-5ba6abf80b19",
      "name": "Update GitHub with Merged Preview2",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [256, 1856],
      "webhookId": "45d18e49-4ac4-471b-af2e-7eec33da7075",
      "credentials": {
        "githubApi": {
          "id": "xPxf1slGiyx1TGdN",
          "name": "chefmatteo_testing_blog_integration"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Log successful preview merge\nconst addedSlug = $('Merge Preview Content2').item.json.addedSlug;\nconst newPreviewCount = $('Merge Preview Content2').item.json.newPreviewCount;\n\nreturn [{ json: { \n  message: `Successfully merged new blog preview: ${addedSlug}`,\n  totalPreviews: newPreviewCount,\n  timestamp: new Date().toISOString(),\n  action: 'preview_merge_success'\n} }];"
      },
      "id": "6ca76c5b-7c56-4b91-9ad1-d5308697ea70",
      "name": "Log Preview Success2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [448, 1856]
    },
    {
      "parameters": {
        "functionCode": "// Log no action needed for preview\nreturn [{ json: { \n  message: 'Preview content is identical - no update needed',\n  timestamp: new Date().toISOString(),\n  action: 'preview_no_action'\n} }];"
      },
      "id": "66832ba1-ef4d-4563-82f7-7e589519f62a",
      "name": "Log Preview No Action2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-320, 2080]
    }
  ],
  "connections": {
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Set date1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set date1": {
      "main": [
        [
          {
            "node": "Format date2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format date2": {
      "main": [
        [
          {
            "node": "Set commit date2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set commit date2": {
      "main": [
        [
          {
            "node": "Search for blogPostContent snippet1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Search for blogPreviews snippet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search for blogPostContent snippet1": {
      "main": [
        [
          {
            "node": "Download snippet from Google Drive1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download snippet from Google Drive1": {
      "main": [
        [
          {
            "node": "Validate Snippet2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get GitHub blogPostContent.ts2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get GitHub blogPostContent.ts2": {
      "main": [
        [
          {
            "node": "Extract GitHub Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract GitHub Content": {
      "main": [
        [
          {
            "node": "Parse GitHub Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse GitHub Content": {
      "main": [
        [
          {
            "node": "Compare Content Python",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Snippet2": {
      "main": [
        [
          {
            "node": "Compare Content Python",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Content Python": {
      "main": [
        [
          {
            "node": "Parse Compare Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Compare Result": {
      "main": [
        [
          {
            "node": "Merge Content2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log No Action2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Content2": {
      "main": [
        [
          {
            "node": "Content Safety Check2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Safety Check2": {
      "main": [
        [
          {
            "node": "Update GitHub with Merged Content2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update GitHub with Merged Content2": {
      "main": [
        [
          {
            "node": "Log Success2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search for blogPreviews snippet1": {
      "main": [
        [
          {
            "node": "Download preview snippet from Google Drive1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download preview snippet from Google Drive1": {
      "main": [
        [
          {
            "node": "Validate Preview Snippet2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get GitHub blogPreviews.ts2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get GitHub blogPreviews.ts2": {
      "main": [
        [
          {
            "node": "Extract GitHub Previews",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract GitHub Previews": {
      "main": [
        [
          {
            "node": "Parse GitHub Previews",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse GitHub Previews": {
      "main": [
        [
          {
            "node": "Compare Previews Python",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Preview Snippet2": {
      "main": [
        [
          {
            "node": "Compare Previews Python",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Previews Python": {
      "main": [
        [
          {
            "node": "Parse Preview Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Preview Result": {
      "main": [
        [
          {
            "node": "Merge Preview Content2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Preview No Action2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Preview Content2": {
      "main": [
        [
          {
            "node": "Preview Safety Check2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preview Safety Check2": {
      "main": [
        [
          {
            "node": "Update GitHub with Merged Preview2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update GitHub with Merged Preview2": {
      "main": [
        [
          {
            "node": "Log Preview Success2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7efb57ee463638d3638e3e4571358ef61feadec8ab43d6c81603ac733931cb3a"
  }
}
